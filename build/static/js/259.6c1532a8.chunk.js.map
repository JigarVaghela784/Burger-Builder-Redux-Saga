{"version":3,"file":"static/js/259.6c1532a8.chunk.js","mappings":"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","sources":["webpack://my-burger-app/./src/Components/Auth/Auth.module.css?2ca8","Components/Auth/Auth.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Auth\":\"Auth_Auth__U5mSY\"};","import React, { useState, useEffect } from \"react\";\nimport Input from \"../Form/Input\";\nimport Button from \"../UI/Button/Button\";\nimport style from \"./Auth.module.css\";\nimport Spinner from \"../UI/Spinner/Spinner\";\nimport * as actions from \"../../store/action/index\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { updatedObject } from \"../../Shared/utility\";\nimport { validationHandler } from \"../../Shared/validation\";\n\nconst Auth = ({\n  onAuth,\n  loading,\n  isAuthenticated,\n  error,\n  setAuthNavigateToPath,\n  buildingBurger,\n  onSetAuthNavigatePath,\n}) => {\n  const [auth, setAuth] = useState({\n    authForm: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"E-Mail\",\n        },\n        value: \"\",\n        validation: {\n          require: true,\n          isEmail: true,\n        },\n        valid: false,\n        focused: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          require: true,\n          minLength: 8,\n        },\n        valid: false,\n        focused: false,\n      },\n    },\n    isSignup: true,\n  });\n  useEffect(() => {\n    if (!buildingBurger && setAuthNavigateToPath !== \"/\") {\n      onSetAuthNavigatePath();\n    }\n  },[buildingBurger,setAuthNavigateToPath,onSetAuthNavigatePath]);\n\n  const onChangeHandler = (e, id) => {\n    const updAuthForm = updatedObject(auth.authForm, {\n      [id]: updatedObject(auth.authForm[id], {\n        value: e.target.value,\n        valid: validationHandler(e.target.value, auth.authForm[id].validation),\n        focused: true,\n      }),\n    });\n    setAuth({ ...auth, authForm: updAuthForm });\n  };\n\n  const formInputData = [];\n  for (let key in auth.authForm) {\n    formInputData.push({\n      id: key,\n      config: auth.authForm[key],\n    });\n  }\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    onAuth(\n      auth.authForm.email.value,\n      auth.authForm.password.value,\n      auth.isSignup\n    );\n  };\n\n  const switchAuthModeHandler = () => {\n    setAuth((prev) => {\n      return { authForm: prev.authForm, isSignup: !prev.isSignup };\n    });\n  };\n\n  let form = formInputData.map((formEl) => (\n    <Input\n      key={formEl.id}\n      elementType={formEl.config.elementType}\n      elementConfig={formEl.config.elementConfig}\n      value={formEl.config.value}\n      inValid={!formEl.config.valid}\n      shouldValidation={formEl.config.validation}\n      focused={formEl.config.focused}\n      onChange={(e) => onChangeHandler(e, formEl.id)}\n    />\n  ));\n  if (loading) {\n    form = <Spinner />;\n  }\n  let authNavigate = null;\n  if (isAuthenticated) {\n    authNavigate = <Navigate to={setAuthNavigateToPath} />;\n  }\n\n  let errorMessage = null;\n  if (error) {\n    errorMessage = <p>{error.message}</p>;\n  }\n\n  return (\n    <div className={style.Auth}>\n      {errorMessage}\n      {authNavigate}\n      <form onSubmit={submitFormHandler}>\n        {form}\n        <Button btnType={\"Success\"}>SUBMIT</Button>\n      </form>\n      <Button clicked={switchAuthModeHandler} btnType={\"Danger\"}>\n        Switch To {auth.isSignup ? \"Sign In\" : \"Sign Up\"}\n      </Button>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    setAuthNavigateToPath: state.auth.authNavigateToPath,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthNavigatePath: () => dispatch(actions.setAuthNavigateToPath(\"/\")),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"names":["connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","setAuthNavigateToPath","authNavigateToPath","dispatch","onAuth","email","password","isSignup","actions","onSetAuthNavigatePath","useState","authForm","elementType","elementConfig","type","placeholder","value","validation","require","isEmail","valid","focused","minLength","setAuth","useEffect","formInputData","key","push","id","config","form","map","formEl","Input","inValid","shouldValidation","onChange","e","updAuthForm","updatedObject","target","validationHandler","onChangeHandler","Spinner","authNavigate","to","errorMessage","message","className","style","onSubmit","event","preventDefault","Button","btnType","clicked","prev"],"sourceRoot":""}